{"version":3,"sources":["components/ColorSection.js","components/MainButton.js","helpers/DisplayShadowBlock.js","App.js","reportWebVitals.js","index.js"],"names":["ColorSectionWrapper","styled","ColorSection","action","color","id","style","backgroundColor","onClick","e","target","parentElement","className","MainBtnWrapper","MainButton","value","gameStatus","displayShadowBlock","section","innerHTML","children","width","height","position","top","blinkingColorSections","counter","sections","setTimeout","length","MainWrapper","colors","App","useState","roundCounter","setRoundCounter","activeSections","setActiveSections","startGame","setStartGame","setGameStatus","sectionsRef","useRef","useEffect","startGameHandler","arrayOfSections","Array","from","current","filter","item","forEach","sort","Math","random","slice","map","onCheckColorSequences","activedSectionColor","includes","sectionsIndex","findIndex","splice","ref","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69e2d4b1.chunk.js","sourcesContent":["import React, {useEffect, useRef} from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst ColorSectionWrapper = styled('div')`\r\n    width: 300px;\r\n    height: 300px;\r\n    position: relative;\r\n    \r\n    & .shadow{\r\n        display: block;\r\n        position: absolute;\r\n        top: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        background-color: rgba(0,0,0,0.5);\r\n    }   \r\n`;\r\n\r\nconst ColorSection = ({action, color, id}) => {\r\n\r\n    return(\r\n        <ColorSectionWrapper style={{backgroundColor: color}}\r\n                             id={id}\r\n                             onClick={(e) => action(e.target.parentElement, color)}\r\n        >\r\n           <div className=\"shadow\"/>\r\n        </ColorSectionWrapper>\r\n    );\r\n}\r\n\r\nexport default ColorSection;","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst MainBtnWrapper = styled('div')`\r\n    width: 150px;\r\n    height: 150px;\r\n    background-color: #3a4061;\r\n    position: absolute;\r\n    display: block;\r\n    margin: auto;\r\n    left: 0;\r\n    right: 0;\r\n    top: 230px;\r\n    border-radius: 50%;\r\n    box-shadow: 1px 1px 5px 7px rgb(0 0 0 / 30%);\r\n    cursor: pointer;\r\n    \r\n    &:hover{\r\n       outline: none;\r\n       box-shadow: inset 1px 1px 5px 7px #673ab7;\r\n    }\r\n    \r\n    & span{\r\n        position: absolute;\r\n        left: 0;\r\n        right: 0;\r\n        text-align: center;\r\n        top: 50px;\r\n        color: #fff;\r\n        font-size: 30px;\r\n        \r\n    }\r\n`;\r\n\r\nconst MainButton = ({value, action = null, gameStatus}) => {\r\n  return(\r\n      <MainBtnWrapper onClick={() => action()} id={\"btn\"}>\r\n          <span>{value !== 0 ? value : gameStatus}</span>\r\n      </MainBtnWrapper>\r\n  );\r\n};\r\n\r\nexport default MainButton;","import React from 'react';\r\n\r\nexport const displayShadowBlock = (section) => {\r\n    //console.log(section);\r\n    section.innerHTML = `<div className='shadow'></div>`;\r\n    if(section.children){\r\n        section.children[0].style.backgroundColor = \"rgba(0,0,0,0.5)\";\r\n        section.children[0].style.width = \"100%\";\r\n        section.children[0].style.height = \"100%\";\r\n        section.children[0].style.position = \"absolute\";\r\n        section.children[0].style.top = \"0\";\r\n    }else{\r\n        section.style.backgroundColor = \"rgba(0,0,0,0.5)\";\r\n        section.style.width = \"100%\";\r\n        section.style.height = \"100%\";\r\n        section.style.position = \"absolute\";\r\n        section.style.top = \"0\";\r\n    }\r\n\r\n    return section;\r\n}\r\n\r\n\r\nexport const blinkingColorSections = (section, counter, sections) => {\r\n    setTimeout(() => {\r\n       displayShadowBlock(section);\r\n    }, 500);\r\n    section.innerHTML = \"\";\r\n\r\n    //call recursive function till counter < sections.length\r\n    counter ++;\r\n    if(counter < sections.length){\r\n        setTimeout(() => {\r\n            blinkingColorSections(sections[counter], counter, sections);\r\n        }, 1000);\r\n    }\r\n}","import React, {useEffect, useRef, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ColorSection from \"./components/ColorSection\";\r\nimport MainButton from \"./components/MainButton\";\r\nimport {blinkingColorSections, displayShadowBlock} from \"./helpers/DisplayShadowBlock\";\r\n\r\n\r\nconst MainWrapper = styled('div')`\r\n  max-width: 600px;\r\n  margin: auto;\r\n  transform: translate(0, 20%);\r\n  overflow: hidden;\r\n  border-radius: 50%;\r\n  border: 10px solid darkblue;  \r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  position: relative;\r\n  \r\n`;\r\n\r\nconst colors = [\"green\", \"red\", \"yellow\", \"blue\"];\r\n\r\nfunction App() {\r\n  const [roundCounter, setRoundCounter] = useState(0);\r\n  const [activeSections, setActiveSections] = useState([]);\r\n  const [startGame, setStartGame] = useState(false);\r\n  const [gameStatus, setGameStatus] = useState(\"Press\");\r\n  const sectionsRef = useRef();\r\n\r\n  //Start Game Launcher\r\n  useEffect(() => {\r\n      if(startGame){\r\n          setTimeout(() => {\r\n            startGameHandler();\r\n          }, 1500);\r\n      }\r\n  }, [startGame, roundCounter]);\r\n\r\n  //check game status\r\n  useEffect(() => {\r\n      if(gameStatus === \"Error!\"){\r\n          //console.log(\"error\");\r\n          setTimeout(() => {\r\n              setGameStatus(\"Press\");\r\n\r\n          }, 2000);\r\n          setActiveSections([]);\r\n          setStartGame(true);\r\n          setRoundCounter(0);\r\n      }\r\n  }, [gameStatus])\r\n\r\n\r\n  const onClickStartGameBtn = () => {\r\n      if(!roundCounter){\r\n          setRoundCounter(1);\r\n      }\r\n      setStartGame(true);\r\n  }\r\n\r\n  const startGameHandler = () => {\r\n      //console.log(\"run startGameHandler\");\r\n      //console.log(\"start\", sectionsRef.current.children);\r\n      //exclude btn from sections array\r\n      const arrayOfSections = [...Array.from(sectionsRef.current.children)].filter((item) => item.id !== \"btn\");\r\n      //all section clear by default\r\n      arrayOfSections.forEach((item) => {\r\n          if(item.children.length > 0){\r\n             displayShadowBlock(item);\r\n          }\r\n      });\r\n\r\n      //get random sections from all sections for blinking\r\n      const sections = [...arrayOfSections.sort(() => Math.random() - Math.random()).slice(0, roundCounter)];\r\n      //console.log(sections);\r\n      if(sections.length > 0){\r\n          //put active colors ONLY to array\r\n          setActiveSections([...activeSections, ...sections.map((item) => item.style.backgroundColor)]);\r\n         //run blinking function avery time with delay till section.length > section\r\n          blinkingColorSections(sections[0], 0, sections);\r\n      }\r\n  }\r\n\r\n  //here we have a bug, second round calculated wrong\r\n  const onCheckColorSequences = (section, activedSectionColor) => {\r\n     //console.log(section, activedSectionColor);\r\n      //console.log(\"run onCheckColorSequences\");\r\n      section.innerHTML = \"\";\r\n      //timeout for blinking\r\n      setTimeout(() => {\r\n          displayShadowBlock(section);\r\n      }, 1000);\r\n\r\n     if(activeSections.includes(activedSectionColor)) {\r\n         //console.log(\"includes\", activedSectionColor);\r\n         const sectionsIndex = activeSections.findIndex((item) => item === activedSectionColor);\r\n         activeSections.splice(sectionsIndex, 1);\r\n         //if all answers are correct - level up!!\r\n         if (activeSections.length === 0) {\r\n             setRoundCounter(roundCounter + 1);\r\n             //remove all in actived sections\r\n             setActiveSections([]);\r\n         }\r\n     }else{\r\n         //not guess!!!\r\n         setRoundCounter(0);\r\n         setGameStatus(\"Error!\");\r\n     }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <MainWrapper className={\"main-wrapper\"} ref={sectionsRef}>\r\n          {colors.length > 0 && colors.map((item, index) => {\r\n              return <ColorSection key={index + item}\r\n                                   color={item}\r\n                                   id={index}\r\n                                   action={onCheckColorSequences}\r\n                    />\r\n          })}\r\n           <MainButton action={onClickStartGameBtn} value={roundCounter} gameStatus={gameStatus}/>\r\n      </MainWrapper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}